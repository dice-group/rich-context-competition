{
    "abstract": "Abstract\nThis article turns towards the spatial life of `digital infrastructures', i.e. code, protocols, standards, and data formats that\nare hidden from view in everyday applications of computational technologies. It does so by drawing on the version\ncontrol system Git as a case study, and telling the story of its initial development in order to reconstruct the circum-\nstances and technical considerations surrounding its conception. This account engages with computational infrastruc-\ntures on their own terms by adopting the figure of the `stack' to frame a technically informed analysis, and exploring its\nimplications for a different kind of geographic inquiry. Drawing on topology as employed by Law and Mol, attention is\ngiven to the multiplicity of spatialities and temporalities enrolled in digital infrastructures in general, and Git specifically.\nAlong the lines of the case study and by reading it against other literatures, this notion of topology is expanded to include\nthe material performation of fundamentally arbitrary, more-than-human topologies, as well as their nested articulation,\ntranslation and negotiation within digital infrastructures.\n",
    "reduced_content": "Original Research Article\nStacked spaces: Mapping digital\ninfrastructures\nTill Straube\n Keywords\nGit, infrastructure, stack, technology, topology, version control\nIntroduction\nCritical analyses of information and communication\ntechnologies (ICT) necessarily focus on specific aspects\nof a wide-ranging, complex subject matter. In human\ngeography, the entry point to picking apart the various\nworkings and implications of digital technologies is\ntheir enigmatic relationship to physical space, and vari-\nous influential works have proposed different analytical\nframings to this problem (Aoyama and Sheppard, 2003;\nEmpirical studies tend to center around certain focal\npoints where technological innovation interfaces with\nsocial spaces, such as the `smart city' (Gabrys, 2014;\n2006). Geographic research often focuses on the effects\nthat specific applications and ICT in general have on\nsociety and space, but it tends to be less concerned with\nthe technical details of how digital technologies do\nwork to effect these changes.\nThe present text looks behind the representational\ninterfaces of the applications operated by the user on\ntheir computer or mobile device, and focuses on the\n`infrastructural' technologies that run in the back-\nground and link them to the hard materiality of bitwise\noperations, magnetic storage, and optical cables. There\nare a myriad of computational processes, languages,\nprotocols, formats, and standards involved in the func-\ntioning of any computational system, and the large\nmajority of their workings escape understanding by\nany single computer engineer, let alone the end user.\nA key challenge to studying protocols, formats, and\nstandards is that making them visible requires work.\nInfrastructural technologies can be reclaimed from the\nbackground through studying their historically situated\nDepartment of Human Geography, Goethe University Frankfurt,\nFrankfurt, Germany\nCorresponding author:\nTill Straube, Department of Human Geography, Goethe University\nFrankfurt, Theodor-W.-Adorno-Platz 6, 60629 Frankfurt am Main,\nGermany.\nEmail: straube@geo.uni-frankfurt.de\nBig Data & Society\nReprints and permissions:\nsagepub.com/journalsPermissions.nav\nbds.sagepub.com\nCreative Commons NonCommercial-NoDerivs CC-BY-NC-ND: This article is distributed under the terms of the Creative Com-\nmons Attribution-NonCommercial-NoDerivs 3.0 License (http://www.creativecommons.org/licenses/by-nc-nd/3.0/) which permits\nnon-commercial use, reproduction and distribution of the work as published without adaptation or alteration, without further permission provided the\noriginal work is attributed as specified on the SAGE and Open Access pages (https://us.sagepub.com/en-us/nam/open-access-at-sage).\nassemblage, i.e. by drawing on archives to ``artificially\nproduce (. . .) the state of crisis'' that led to their con-\nManovich recounts the prototyping of the personal\ncomputer by Alan Kay and his team at Xerox PARC\nin the 1970s, he aims to ``look into the thinking of the\ninventors of cultural computing themselves'' by asking:\n``What were their reasons for doing this? What was\nomitted). The result of that inquiry is an informative\ndissection of the contingent design choices and resulting\naffordances that continue to define the fundamental\nformats, mechanisms, and user interfaces of a wide\nrange of present-day multimedia. It is through retracing\nthe specific circumstances and considerations which\nhave led to transitions and disruptions in fundamental\ndigital technologies, then, that these systems come into\nview as ``matters of concern'', rather than ``matters of\nThe object of inquiry chosen here is a version control\nsystem, or source control management tool (SCM), by\nthe name of Git. Version control is a technology that\ntracks changes made to the source code of a piece of\nsoftware. It is also employed to facilitate cooperation\non software projects, as SCMs provide for mechanisms\nthat prevent developers from accidentally overwriting\neach other's changes, and make visible who supplied\nwhich revisions to the codebase. SCMs are of interest\nto this exercise of unpacking digital infrastructures\nbecause they are largely hidden from view. Most end\nusers of digital technologies never come into direct con-\ntact with revision control systems, although any given\napplication that they do use, from on-line shopping\nsites to navigation systems, was almost certainly devel-\noped with the help of version control technology. What\nis more, SCMs typically do operations on code as text-\nual data, thus blurring the preconceived dividing line\nbetween code and data, and speaking to the complexity\nand fluidity of digital infrastructures (Mackenzie,\nSoftware engineers routinely use revision control\nsystems to track and share changes without thinking\ntwice about their mechanisms, or where they came\nfrom. Thus, even to most people who are familiar\nwith SCMs and engage with them on an everyday\nbasis, version control appears as an already-established\ntechnology that can be employed and built upon in\ndifferent ways, but is rarely subjected to scrutiny\nitself. In this way, Git is similar to technologies like\nthe Simple Mail Transfer Protocol (SMTP, the stand-\nard behind e-mail), or the Global Positioning System\n(GPS). It is only for a small number of influencers that\nthese `basic' technologies are not beyond second-gues-\nsing, modifying, and re-engineering. For the rest of us,\nSCMs are an unexciting, technical necessity for\ncollaboration on code. While version control systems\nmay inform workflow and its results more than their\nusers realize, the technology itself remains in the back-\nground: the less it is noticed, and the less time is spent\nactively thinking about version control, the better. In\nthis infrastructural quality and relative obscurity lies\nmy interest in excavating the technologies involved in\nversion control.\nOf a variety of possible candidate SCMs, Git was\nchosen here for several reasons. First, it is open\nsource software, and as such it is possible to subject\nGit to technical scrutiny at a level of detail that\nwould be impossible with pieces of software that hide\ntheir source code. Secondly, while there are no reliable\nusage statistics of version control systems, it is none-\ntheless apparent that Git has in recent years experi-\nenced the most striking surge in application,1 and\nthrough the proliferation of the web-based repository\nhosting service GitHub it is now being employed to\ncollaborate on a wide range of textual data (including\nlegal documents, vector images, cookbooks, or DNA\ninformation). Finally, Git is a rather recent addition to\nthe family of revision control software, and, paired with\nthe considerable interest it has generated within the\nsoftware development community, this has led to a\nrelative wealth of publicly accessible information per-\ntaining to its initial development.\nThe goal of my analysis of Git as digital infrastruc-\nture is two-fold: First, it is an exercise in empiricist\nengagement with computational technologies. Taking\nmethodological cues from science and technology stu-\ndies and actor-network theory literatures, I offer an\naccount of the workings of infrastructural technologies\nthat is sensitive to the technical considerations sur-\nrounding their design by computer engineers.\nof ``technical criticism'', this approach pursues a situ-\nated understanding of digital devices through careful\nunpacking of a multitude of interfaced systems, lan-\nguages, protocols, standards, and formats.\nThe second and related objective of the present text\nis to irritate preconceived notions of space from an\ninterdisciplinary position that takes seriously both tech-\nnical considerations and abstractions deployed in com-\nputer science, as well as social science literature\nexamining (digital) technologies. What spatialities and\ntemporalities emerge when an infrastructural technol-\nogy is unpacked and its inner workings are made vis-\nible, and what are suitable models and concepts to\nthink about the technological interdependencies and\ninterfaces contained within digital infrastructures in\nspatio-temporal terms?\nIn what follows, I first reconstruct the circumstances,\nevents, and considerations surrounding the\n2 Big Data & Society\ndevelopment of the version control system Git. This\nwas achieved by closely analyzing on-line documents\nincluding articles, blog posts, presentations, published\ninterviews, and messages to public mailing lists. As a\nstylistic device, I present my findings in a story-like\npassage that brings back to life the moment of Git's\nconstruction and lets its protagonists speak without\nan a priori imposition of any interpretational frame-\nwork. Next, I distill from this account the model of\nthe stack as a natively technical framework to think\nconceptually about the various layers of protocols,\ncode, and data formats involved in the functioning of\nan infrastructural technology like Git. Finally, I\ndevelop a notion of topology chiefly inspired by science\nand technology studies to more thoroughly theorize the\nway in which multiple spatialities and temporalities are\nimplicated in stack-like infrastructural systems.\nKernel trouble\nThis section of the article recounts the initial\ndevelopment of Git as told by the actors immediately\ninvolved, the central figure being lead developer Linus\nTorvalds. My account refrains from sourcing pieces of\ninformation individually for stylistic purposes.\nReferences to the archive materials (which were coded\nthematically and combined to a coherent narrative) are\ninstead listed collectively in the appendix.\nIn the beginning of April 2005, Linus Torvalds\n(the principal author and eponym of the Linux oper-\nating system) had a problem to solve. For years now,\nthe core developers of Linux had relied on the ver-\nsion control tool BitKeeper to manage the many\nchanges to the Linux `kernel' (the operating system's\nvital codebase) which were needed to continuously\nimplement new requirements and to smooth out\nbugs. Use of this SCM was optional for Linux devel-\nopers; some contributors still preferred to share code\nby e-mailing standardized files containing changes\n(so-called `patches') directly, as in the early days of\nLinux development. But Torvalds and other key con-\ntributors used BitKeeper to keep track of these\nchanges and to resolve conflicts between versions\nthat had revisions made to the same part of the\ncode, making it the de facto standard for the\ncooperative development effort.\nTorvalds had not much cared that, unlike Linux,\nBitKeeper was proprietary software. The CEO of the\ncompany that owned BitKeeper, Larry McVoy, was\nhimself a contributor to the Linux kernel and had pro-\nvided a `community license' free of charge for open\nsource projects like Linux. Additionally, the\nBitKeeper client software allowed for limited interop-\neration with other version control protocols. As far as\nTorvalds was concerned, BitKeeper simply got the job\ndone. But other kernel contributors had been more\nconcerned by the software's proprietary status. They\nhad been skeptical of a `black-boxed' commercial tool\nmanaging the Linux codebase, and thought that this\nwas contrary to the open source philosophy of the\nLinux project. There had been occasional `flamewars'\non the Linux kernel mailing list about this issue. Things\nhad finally come to a head when a veteran Linux devel-\noper reverse-engineered the BitKeeper protocol (in\norder to read metadata about code revisions from com-\nmunication with the BitKeeper servers, rather than\nmerely downloading the most current version of the\ncode). For McVoy, this had been the first step to build-\ning a powerful unlicensed client, and a threat to his\nbusiness. In reaction, he had revoked the community\nlicense, and now the Linux community was facing\ngoing back to e-mailing patches and `tarballs' (com-\npressed archives).\nUntil now, Torvalds' experience with SCMs had\nbeen strictly from a user perspective. While some sort\nof version control was a necessity when handling a large\ncooperative project, SCMs were thoroughly unexciting\nto him from a technical standpoint. But when research-\ning open source alternatives to BitKeeper he could not\nfind a solution that would work for the Linux commu-\nnity. From Torvalds' perspective, most SCMs (like the\nde facto industry standard CVS or Apache's\nSubversion) had a flawed approach to revision control,\nresulting in a `broken' model: they relied on a central\nrepository that would keep track of the changes made\nby all users. In a centralized system, users would usu-\nally `check out' files, make their edits to the code, and\ncheck the files back in. Testing would have to be cen-\ntrally coordinated, and experimental `branches' (alter-\nnative, concurrent versions) of the source code would\nresult in clutter on the server. Most importantly, a cen-\ntralized system would invariably give rise to the polit-\nical question of access: Which developers would have\nthe right to upload changes to the kernel code? Grant\nprivileges to too many contributors, and there would be\nbad `commits' (batches of code revisions). Choose too\nfew, and those with access would spend all their time\nworking in changes sent to them from those without\ncommit privileges. Centralized SCMs might work\n(though badly, in Torvalds' opinion) for a tightly man-\naged company environment, but not at all for the loose\nnetwork of contributors to the Linux kernel.\nIn contrast, BitKeeper had been accommodating a\ndecentralized approach to version control. Rather than\nworking on single files stored on a central server, con-\ntributors each had their own copy of the entire code-\nbase, and were able to make changes and run tests\nlocally. Experimental features could be tried out with-\nout compromising anyone else's version of the code.\nOnce a contributor felt confident that his2 revisions\nwere an improvement to the code, he would share them\namong the community, and everybody could choose for\nthemselves whether to incorporate the changes or not.\nWhile everybody was looking at Torvalds' copy of the\nkernel as the `official' version, in theory nothing pre-\nvented any other developer from `forking' (i.e. creating\nan independent version of) the project and taking devel-\nopment of the operating system into another direction.\nWhat changes ended up in the kernel release was deter-\nmined by `networks of trust' rather than bureaucratic\nadministration of privileges. What is more, in a decen-\ntralized environment backups were not an issue,\nbecause so many versions of the same codebase existed\n`out there.' Torvalds felt that this model was the best fit\nfor open source development and, more importantly,\nfor his own personal workflow. Decentralized SCM\nwas the way to go, and Torvalds feared that if they\nhad to switch to a centralized tool in a pinch, it\nwould be very hard to ever go back.\nTo be sure, there were a few decentralized SCMs\navailable that were free and open source software. The\nbiggest problem with these tools, however, was perform-\nance. One of the more promising candidates, a version\ncontrol tool called Monotone, took over two hours just\nto import the Linux kernel's 17,291 files at the time.\nImportantly, Torvalds recognized that performance\nwas not simply a question of doing the same thing\nfaster or slower. If `diffing'--i.e. comparing two versions\nof a (partial) codebase line by line and highlighting the\nchanges--was slow and resulted in a `get-another-coffee-\nmoment' every time, developers were simply less likely to\ndiff at all. This would result in redundant work and bad\ncode. Similarly, if one had to plan ahead and set aside a\nday for `merging' (combining) two or more concurrent\nbranches, this would discourage contributors from\nopening their own experimental branches in the first\nplace, and result in clutter and bad commits.\nDespite its ``glacial'' speed, however, there was one\nthing in particular that Torvalds found intriguing\nabout Monotone: the way in which it hashed3 objects.\nIn lieu of BitKeeper, Torvalds had already started\nkeeping a record of consecutive patches with their\nrespective hash codes to be able to quickly verify the\ncontent of code revisions and recognize corrupted\ndata. But Monotone not only used a superior hash\nalgorithm (SHA-1 rather than the MD5 checksums\nTorvalds had adopted from BitKeeper) \u00adthe\nMonotone developers had also incorporated hashing\nmuch more rigorously, to the point where every ver-\nsion of a file or a directory, or indeed of the entire\nproject, could be efficiently referenced by its SHA-1\nhash, rather than by file names, version numbers,\ntimestamps and so on. This approach immediately\nappealed to Torvalds, even if it meant abandoning\nhis own series-of-subsequent-patches model.\nTorvalds realized that writing his own version con-\ntrol tool would not be much of a challenge if he only\ngot the basic ideas right. As it happened, the latest\nstable Linux kernel (version 2.6.11) had just been\nreleased in March, and he had some time to spare\nbefore things would heat up again in the next release\ncycle. Give me two weeks, Torvalds thought, and I will\nwrite a better SCM than anything out there right now.\nHe went to work, and after a few days Torvalds' revi-\nsion control project became self-hosting, with Torvalds'\nfirst commit message reading: ``Initial revision of `Git',\nthe information manager from hell.'' This commit\nmarks the creation of Git (the name deriving from a\nBritish slang term for a rotten person--the second pro-\nject Torvalds named after himself, he jokes). Two\nmonths later, the custom SCM was employed to\nInitially narrowly designed around what he wanted\nhis own workflow to be like, Torvalds' solution to ver-\nsion control was notoriously difficult to use: As another\nLinux lead developer remarked, Git seemed to be\n``expressly designed to make you feel less intelligent\nthan you thought you were.'' Still, Linux developers\nand other open source communities quickly recognized\nGit's technical sophistication and practical potential,\nstarted to contribute to the new project, and employed\nit to collaborate on their own codebases.\nInfrastructural stacks\nUnlike the fundamental technological changes brought\ninto the world by Alan Kay and his team when intro-\nducing the personal computer, it is hard to pinpoint any\ninnovation per se that Torvalds might have contributed\nby authoring Git. Like virtually all software, the Git\nproject was built on a variety of existing technologies.\nFor example, it implements the SHA-1 hash function, it\nprovides a Secure Shell (SSH) interface for encrypted\nnetwork connections (next to its own SSH-like proto-\ncol), and it was written in C, a general-purpose pro-\ngramming language developed in the early 1970s. Git\nadditionally employs various code `libraries' which are\nused in a wide range of open source software to avoid\ndefining the same basic functions over and over again:\nAt the time of this writing, installation of Git on a\nLinux system requires the libraries `curl' (for data\ntransfer), `zlib' (for compression), `openssl' (for\nencrypted remote connections), `expat' (for parsing\nXML), and `libiconv' (for character encoding). What\nis more, Torvalds' design choices were all inspired by\nexisting SCMs--he cites BitBucket, Monotone, and his\nown history-of-patches model as Git's ``three parents''\n(Torvalds, 2006d). In the spirit of open source culture,\nGit can be thought of as a ``remix'' (Lessig, 2008) of\nexisting tools and technologies.\n4 Big Data & Society\nNot only is Git inspired by and built upon various\ntechnologies that are external to the project itself. With\nits focus on flexibility, performance, and structural\nintegrity (rather than an intuitive user interface), Git\nitself comes into view not so much as an end-user appli-\ncation but as a format for storing versions of files, a\nprotocol for exchanging code, and a standard for dis-\ntributed development processes--a ``form for handling\nSMTP or GPS, Git recedes into the background so\neasily because it is an infrastructural technology.\nWhen it comes to interactions and dependencies\nbetween digital system components like protocols, data\nformats, or software, computer engineers tend to concep-\ntualize them in terms of hierarchically organized `stacks'\n(Solomon, 2013). The idea of complementing protocols\nthat are `layered' on top of each other dates back to the\nOpen Systems Interconnection (OSI) model developed in\nthe late 1970s. This conceptual framing of communica-\ntion functions within computer networks was the result\nof parallel efforts by the International Organization for\nStandardization (ISO) and the International Telegraph\nand Telephone Consultative Committee (CCITT) to\nprovide a standard reference that would enable commu-\nnication between a diverse set of parallel (and often pro-\nprietary and competing) networking technologies\n(Zimmermann, 1980). The model articulates distinct\nfunctions that have to be fulfilled by networking proto-\ncols in order for two computers to communicate, result-\ning in seven abstract, hierarchical layers.\nIt is important to note that protocols at different layers\nof the OSI model handle the same base information sim-\nultaneously, but at different levels of abstraction. For\nexample, the hypertext transfer protocol (HTTP) handles\nthe source code of a web page as textual data within the\napplication layer. The same raw data is handled as\n`packets' within the network layer, and as a simple con-\nsecutive string of bits at the physical layer. Generally\nspeaking, any given networking protocol can be thought\nof as implementing a specific layer, and must provide an\ninterface only to the two specific protocols that locally\nimplement the layers directly above and below. By adher-\ning to this standard, any communication between two\ncomputers can be translated from the `topmost' applica-\ntionlayer--e.g.,aweb pageinHTTP--throughaseriesof\ninterfaces all the way `down' to the physical layer (i.e.\nprotocols that handle the actual signaling through elec-\ntrical currents, optical pulses, sound or radio waves) and\nback `up' again to be decoded as needed--independently\nof any specific protocol.\nAs a global frame of reference for communication\nprotocols, the OSI model enabled the construction of\nthe Internet as a ``network of networks'' (Braden,\n1989a: 7). A protocol `stack', then, is the local imple-\nmentation of a suite of protocols that spans several\nconceptual layers. The best known example of a proto-\ncol stack is the Internet protocol suite (often referred to\nas TCP/IP for its first and most vital components)\nwhich has become the de facto standard for the\nBut `stack thinking' extends beyond the world of net-\nworking protocols. Web servers, for example, are also\nthought of as stacks of complementary, interdependent\nsoftware. The open source `LAMP stack' consists of\nLinux (as operating system), Apache (as HTTP\nserver), MySQL (as relational database management\nsystem), and PHP4 (for server-side scripting of dynamic\nweb pages). Here again, the four pieces of software serve\ndifferent but interdependent functions. They are orga-\nnized hierarchically in that a series of `vertical' transla-\ntions through the stack can be traced with each request\nfrom a remote agent: in order to serve a dynamic web\npage, Apache calls a PHP script (through its PHP inter-\nface, or `module'), which in turn connects to the data-\nbase (through PHP's MySQL `extension') to\ndynamically generate the web page. All three depend\non the Linux operating system and its various compo-\nnents to handle the details of how data is read from the\nhard disk, how the processor does calculations, how\ndata is received and sent over the network, and so on.\nThere are further instances of the stack as a concep-\ntual model for organizing processes and data in com-\nputer science, including the `call stack' that represents\nlayered subroutines of a computer program, or the\nstack as an abstract data type in some programming\nlanguages (Solomon, 2013). But for the remainder of\nthis section the focus will be on the ways in which the\nstack as a conceptual model has traveled beyond the\nrealm of communication standardization and technical\nspecifications, and begun to serve in media studies and\nthe social sciences as a tool for critical analysis of ICT.\nBratton applies the model of the stack to computing\nat large: as ``a machine that serves as a schema, as much\nas it is a schema of machines'' (Bratton, 2015: para. 1).\nHe positions the stack as a contemporary nomos--a\nproductive, geo-political metastructure organizing\nplanetary space and society. At the same time, the\nstack is Bratton's tool for dissecting a vertically inte-\ngrated, dynamic, heterogeneous assemblage organized\nin various systems that ``swap phase states,'' and con-\ntinuously territorialize and de-territorialize the same\ncomponents ``indecipherably'' (Bratton, 2012: section\n3, para. 2). This reading of the stack as an elusive,\nexceedingly complex meta-architecture allows Bratton\nto include various imaginative `layers' of the stack into\nhis sweeping analysis (including the cloud, ubiquitous\ncomputing, augmented reality, the user, or the interface)\nwhile maintaining claims to a planetary perspective.\nAs part of a larger project to re-frame current digital\ntechnologies within speculative post-capitalist contexts,\nTerranova (2014) draws on Bratton's conceptualization\nof the stack in order to urge appropriation of a series of\nemerging digital technologies for their emancipatory\npotential. She proposes working towards the material-\nization of a ``red stack'' by ``engaging with (at least) three\nlevels of socio-technical innovation: virtual money,\nsocial networks, and bio-hypermedia''--the latter sig-\nnifying the increasingly close integration of bodies,\nimagining subversive uses of these `layers', Terranova\nsuggests, the technologies in question cease to be mere\ntools of capitalism, and can contribute to alternative\nsocio-economic configurations. Similarly to Bratton,\nshe employs the stack as a framework that inspires a\nmulti-layered, simultaneous consideration of integrated\ntechnological systems in broad strokes. This reading is\nfar removed from the stack's original technical context\nconcerned with standardization, hierarchies of depend-\nency, translation of data formats between protocols,\ndegrees of abstraction, and so on. Latour provides the\nreverse perspective from the software layer when he\nasserts that mobile phones are ``composed of writings\nIn contrast, Mattern's analysis of smart cities and\ntheir various interfaces makes use of the stack in a way\nthat incorporates these technological considerations.\nShe draws on Solomon's (2013) insightful genealogy of\nthe stack and stack thinking in computer science in order\nto articulate a model of the ``urban stack'' for a prob-\nlematization of transparency and citizenship in smart\nWhite (2016) also proposes a model of the stack that\nstays closer to its technical origins. He engages with the\nfrom their analyses models of ICT as composed of vari-\nous conceptual layers. White goes on to articulate a\nbroad model of the stack--composed here of hardware,\nsoftware, data(base), and interface--that serves as a\nheuristic device in his critical analysis of a specific tech-\nnology: the ordering of taxis by smartphone. Kitchin\n(2016) similarly organizes a wide range of elements\naccording to a stack-like hierarchical logic deemed\nuseful for systematic analysis of concrete technologies.\nWhile the above articulations of the stack differ in the\nspecific layers that they identify, it is nonetheless pos-\nsible to distill from them a general working notion of the\nstack as an analytical tool for `slicing' complex systems\nalong several conceptual lines, exposing cross-sections\nthat allow different views on the same system, each\nwith their own way of abstracting digital information,\nand each contributing to the functioning of the technol-\nogy. Importantly, the stack is not simply an enumeration\nof different elements that constitute a whole. Instead,\neach of its layers is an articulation of a specific logic\nand already encompasses the entire system. It is\nimpossible to `add' software to hardware, or data to\ncode--they each exist on separate conceptual planes\nand are, in themselves, lacking nothing: it is only from\nthe perspective of the hardware layer that Kittler (1995)\ncould famously claim that ``[t]here is no software.''\nAt the same time, the stack clearly establishes hier-\narchy: each layer depends on the one below to function,\nand adds a dimension of abstraction that is in turn the\nbase for the layer above. The stack, then, is not hope-\nlessly indeterminate or indecipherable, as Bratton\nseems to suggest. The hierarchy of layers is real; it is\nhow computational systems are purposely built, and for\neach individual action on the `surface' of the stack it is\npossible to trace a gradual translation, a transparent\nchain of deciphering calls through a series of descend-\ning levels of abstraction all the way `down' to the\nmaterial handling of bits.\nThis notion of the stack adheres to the basic prin-\nciples of its original use as a technical model in com-\nputer science. And yet, as a frame of reference it allows\nfor analysis of systems more generally than the OSI\nmodel which is concerned only with specific interdepen-\ndencies of networking protocols. Unlike Bratton's\nmetaphorical use of the stack, it is a tool for dissecting\nspecific technologies, and stops short of explaining\ncomputing at large, or articulating a new social order.\nThe stack as envisioned here is an analytical tool that\ntakes a real technical model (actually informing system\nbuilding practices by computer engineers), and slightly\nwidens its scope while staying close to its original con-\ntext: its application is metonymic rather than meta-\nphoric. In this sense, the stack can be understood as a\n``middle-range theory''; one that goes beyond mere\ndescription, but does not undertake the effort to explain\nthe world (all systems, or all of society) in a uniform\nCoded topologies\nIn order to describe a technological stack and the ways in\nwhich it negotiates the various tensions outlined above, a\nmultiplicity of concurrent logical strata have to be con-\nsidered. In the vocabulary of Deleuze and Guattari\nand the stack is the ``map'' containing a multitude of\niterative tracings along different lines of flight.\nSoftware engineers routinely work with schematic\nvisualizations when designing systems and interfaces.\nWhat is a database schema or a file system tree but a\n(spatial) tracing of a specific cross-section of the stack?\nI contend that the various articulations of relational\nsystems making up the layers found within digital infra-\nstructures should be taken seriously as spaces prop-\ner--if anything, they are more relevant to\nunderstanding the technological stack than Euclidian\n6 Big Data & Society\nspace (or, for that matter, other spaces `mapped onto'\nthe system by social science researchers).\nSituating the stack thus requires a strategy for deal-\ning with a multiplicity of time-spaces, and I propose\nthat a certain understanding of topology can underpin\nsuch an endeavor conceptually. As Martin and Secor\n(2014: 2) note, however, there is a ``dizzying diversity''\nof geographic texts employing vastly different concepts\nof topology in their analyses. This ambiguity of the\nterm persists where it is applied to digital technologies.\nMarres (2012), for example, uses topology synonym-\nously to a Latourian symmetry in socio-technical\narrangements in her analysis of smart meters, and\nRogers (2012) employs topology to recount a series of\nspecific historical geometries of the Internet.\nIn geography, topology is most commonly under-\nstood as an antithesis to topography. In this reading,\ntopography is concerned with producing images of the\nearth's surface, measuring distances, and locating\nobjects in Euclidian space. Topology, on the other\nhand, is only concerned with qualities of connectivity,\nand has no use for concepts of scale or distance. A\nhiking map is said to be topographical, while a\nsubway map is topological. Where topography follows\nthe logic of territory, topology follows that of the net-\nunderstanding of topology is sometimes illustrated by\nSerres' metaphor of the crumpled handkerchief (Serres\nto the problem of the seven bridges of Ko\n\u00a8 nigsberg\n(Shields, 2012). Topology-as-opposed-to-topography\nhas been employed by various authors in an effort to\nincorporate actor-network theory into geography\nMurdoch, 1998). However, such an understanding of\nthe term has been criticized for oversimplifying or even\nmisreading the mathematical field of topology (Sha,\n2012). Crucially, topological spaces can include measures\nof distance, or metrics: ``the point is to understand\nEuclidean space as one possible topology among others''\nAn alternative approach that explicitly positions\nEuclidian space (and linear time) among a multiplicity\nof alternative time-spaces is the work of Law and Mol,\nwho propose a reading of objects as effects between\nmultiple topologies. This ontological assertion is most\nclearly articulated when the authors interpret Latour's\nfigure of the immutable mobile along those lines:\n[W]e find that the immutable mobile achieves its char-\nacter by virtue of participation in two spaces: it partici-\npates in both network and Euclidean space. And such is\nLatour's trick. To talk of an `immutable mobile' is to\noriginal)\nFor Law and Mol, then, topology is a device to exam-\nine an object by deploying the spaces that it enrolls.\nFollowing this approach, alternative topologies such\nas `network', `fluid', `fire', or `gel spaces'--each with\ntheir own logics of proximity and distance, change\nand continuity, absence and presence--have been\ndeployed to shed light on the hidden topological life\nof a diverse set of objects, such as colonial vessels, a\nwater pump, the aerodynamic design of a fighter jet, or\nThis notion of topology resonates strongly with the\nfigure of the stack. Just as its layers are distinct com-\nplementing views of an entire system, these concurrent\ntime-spaces can be thought of as complete tracings of\nobjects from different topological perspectives, and the\nanalytical focus is drawn to the translations and dis/\ncontinuities at the interfaces of these relational systems.\nIn what follows, I will read this approach against the\nGit case study as well as additional literatures in order\nto draw out some implications of topological thinking\nfor studying infrastructural technologies, and address\nseveral problems arising from its application in this\ncontext.\nThe first issue is with the suitability of preconceived\ntopologies (such as `fluid' or `fire' spaces) for the exam-\nination of digital infrastructures. Rather than imposing\nspatial metaphors onto digital technologies, the goal\nshould be to engage with and draw out specific spatial\narticulations encountered within the various inscrip-\ntions of digital devices. The concept of autospatializa-\ntion as employed by Lury et al. in their topological\nanalysis of automated sorting, comparing, and calculat-\ning practices can lead to such an understanding of\ntechnologically performed spatialities (Lury et al.,\nunderstanding of topology, there is a fundamental arbi-\ntrariness to what spaces can be articulated and exam-\nined in regard to their properties. Rather than\nhighlighting characteristics of digital technologies to\nfit preconceived metaphoric spaces, the approach pro-\nposed here draws on their very overflowing of existing\nframes of reference in order to arrive at informative\ndescriptions of the multiple, concurrent spatialities at\nwork in the stack.\nGit negotiates a variety of spatialities that are built\ninto its infrastructural workings, including hierarchical\nfile systems, networks of developers (often referred to as\n`networks of trust'), the ``text space'' of code (Chun,\nmits, branches, and forks. Furthermore, Git modulates\ntemporality: It is employed to roll back to older\n(working) versions of a buggy software, and because\nindividual commits represent only the incremental differ-\nence between two versions of individual lines of code, old\ncommits can be removed or applied to newer branches,\nor entire branches can be `rebased' to newer commits. Git\nallows forflexible re-ordering of aconsecutive, incremen-\ntal timeline of modifications--nothing less than the\nchanging of a code's history. In other words, a multitude\nof spatio-temporal relational systems that are folded into\nGit can be read directly from the object, and none of\nthem adhere to any preconceived notion of fluid, fire,\nhybrid, cyber- or other space.\nA second and related problem is the distinction of the\nspatialities in and of the stack from mere metaphor.\ndiagrammatic articulations of spatiality (such as a com-\nputer network, or a database schema) are inscribed into\nthe material workings of digital devices and become\nactive in their performation. Drawing on experiments\nin quantum physics, Barad develops the notion of\n``spacetimemattering'' to point to the inextricability of\nspatio-temporal frames of reference and their ``dis/con-\ntinuities'' from those material arrangements that are\ntime-spaces of digital infrastructures, then, are not inter-\npretational devices that are introduced in a moment of\nabstract reading, but rather built into the very material-\nity of stack-like configurations--they are performative of\nand performed by the devices in question.\nTo further complicate matters, nothing warrants the\nexpectation that the time-spaces encountered while\nunpacking the stack be commensurable to human\nexperience. For example, it is not at all out of the ordin-\nary to employ more-than-three-dimensional calculative\nspaces, or nested loops and recursions in software pro-\ngramming. It is thus imperative to be prepared for\nencounters with time-spaces that are difficult or impos-\nsible to relate to, without reducing them to some more\nintuitive framing (just as mathematics is equipped to\nhandle topologies well beyond human capacity for\nimagination). Literatures surrounding feminist materi-\nalism and critical readings of cybernetics have a history\nof engaging with problems of agency and subjectivity in\npost- or more-than-human ontologies (Barad, 2003;\nconceptualizations underline the necessity to widen a\ntopological perspective to include notions of more-\nthan-human time-spaces. Notably, efforts to incorpor-\nate such readings into media theory have pointed out\nthe performative quality of a multiplicity of material-\nIn this reading, Git's capability to handle non-linear\ntemporalities (e.g., by `re-basing' an older branch onto\nthe current `head') is not simply a handy functionality\nfor software engineers cooperating on a project. Instead,\nthe SCM's code is understood here as enacting a `queer'\ntime-space that is at odds with immediate human\nexperience, but which by virtue of translation through\nthe stack is firmly rooted in the materiality of physical\nhardware. This performation of dis/continuous rela-\ntional branches can be considered an example of the\n`spacetimemattering' effects of digital infrastructure.\nThe third issue concerns the relation of time-spaces to\neach other. In their ``Topological Manifesto'', research-\ners at the University of Technology in Darmstadt iden-\ntify a series of typical `spaces' structured by digital\ntechnologies, such as security spaces, administrative\nspaces, transport and mobility spaces, or storage\nspaces, each with their own relational logic\n(Graduiertenkolleg Topologie der Technik, 2015). The\nquestion of how these spaces relate to each other is miss-\ning from that conceptual framing altogether. In Law and\nMol's topological approach, objects may be enrolled in\nmultiple spatialities and thus function as a point of con-\nnection and translation between topologies. However,\nthe origin of these spaces remains unclear; their articula-\ntion seems to be the privilege of the researcher. Taking\ncues from the layer model of the technological stack, I\nunderstand the time-spaces of digital infrastructures\ninstead as inherently connected and articulated within\nanother. As Lefebvre notes, ``[w]e are (. . .) confronted\nby an indefinite multitude of spaces, each one piled\nupon, or perhaps contained within, the next''\n(Lefebvre, 1991: 8). Serres similarly approaches topology\nfrom a position of the in-between, and understands dis-\ntinct modes of temporality as different arrangements of\nthe same coherent fabric and connected through diffuse\nRather than envisioning a multiplicity of spaces as\nunproblematically existing in parallel, the mode of\ninquiry proposed here is concerned with the `pivot\npoints' that translate between technological time-\nspaces, and with their nested articulations.\nWithin Git, concurrent time-spaces, such as the\nunordered, atemporal references to snapshots of files\nand file trees as hash codes on the one hand, and con-\nsecutive revisions on the other, are being continuously\nnegotiated. This interface is articulated in code--specif-\nically the programming language C--that comes with\nits own (textual, spatial) syntax, rules for `name spaces',\nlogical loops and recursions, and as compiled computer\ncode can in turn be located within the operating sys-\ntem's folder hierarchy, and so on.\nIn summary, the topologies that come into view in\nthe process of unpacking the technological stack con-\nform to Law and Mol's framing in that they can be\nthought of as a multiplicity of time-spaces that are\nnecessarily enrolled in the workings of digital devices.\nHowever, they differ in that they are fundamentally\narbitrary and can be read directly from the object's\ninscriptions, in that they materially perform more-\n8 Big Data & Society\nthan-human spatialities and temporalities, and in that\nthey are nested and articulated within each other.\nConclusion\nThe case study of the versioning system Git served as an\nexercise to make visible an infrastructural technology\nthrough reconstruction of the circumstances, events,\nand considerations surrounding its initial design. Its\n`remixing' of existing technologies and models, its\nfocus on performance rather than intuitive usage, as\nwell as its affordances as a format and protocol for\nstoring and exchanging code steered this account\ntowards the conceptualization of infrastructural sys-\ntems as layered stacks, a model immediately derived\nfrom technical design practices.\nWhereas critical analyses of ICT often reduce com-\nplex systems to singular figurations (such as `big data',\nor `the algorithm'), the model of the stack affords mul-\ntiple perspectives on a given system. Rather than com-\nponents adding up to any `whole', each layer accounts\nfor the system's entirety according to the layer's own\nlogic. A situated unpacking of the stack can trace\nabstract actions through a series of vertical translations\nand reveal the hierarchical technological layers at work\nin performing the system.\nMapping digital infrastructures means accounting for\na multiplicity of interfacing time-spaces, and the stack is\na suitable framework for such topological analysis.\nDrawing on ontological assertions about the multiplicity\nof time-spaces and their enrolment in objects, the tech-\nnical model of the stack can be employed to explore the\nmaterial performation of fundamentally arbitrary,\nmore-than-human topologies and their nested articula-\ntion within digital infrastructures. Such an account takes\nseriously the schematic models inscribed into technical\ndevices and in terms of veracity situates them alongside\nmore conventional notions of space and time. Within this\nframework, moments of articulation, translation, medi-\nation, and negotiation take center stage, thereby position-\ning code, protocols, formats, and interfaces as topological\noperators. Unpacking digital infrastructures in such a\nway transcends notions of space that conventionally\nunderpin geographic research, and opens up new perspec-\ntives on the spatial workings of digital devices.\nDeclaration of conflicting interests\nThe author declared no potential conflicts of interest with\nrespect to the research, authorship, and/or publication of\nthis article.\nFunding\nThe author received no financial support for the research,\nauthorship, and/or publication of this article.\nNotes\nthe integrated development environment Eclipse identified\nGit as their primary SCM, the value surpassing that of\nSubversion (30.7%) for the first time in the yearly survey\nand revealing Git as the most popular version control tool\namong Eclipse users (Eclipse Foundation, 2014).\n2. Other pronouns would only gloss over the stark gender\nimbalance in projects like Linux. A survey revealed ``that\nwomen do not play a role in the development of Open\nSource and Free Software; only 1.1% of [the survey's]\nsample is female'', much less than in proprietary software\n(Ghosh et al., 2002: 8). A subsequent study found that\nwomen are actively excluded by hostile ``cultural and\nsocial arrangements'' within open source communities\n3. Simply put, hashing is a cryptographic method that gen-\nerates a fixed-length code (or hash) from an arbitrarily\nlarge set of data. Even slight changes in the input will\nresult in an entirely dissimilar hash. Good hash functions\nare fast, make collisions (i.e. different inputs producing an\nidentical hash) exceedingly unlikely, and are impossible to\nreverse-engineer.\n4. Originally, PHP stood for ``Personal Home Page''. Today,\nthe PHP manual states that the name is a `recursive' acro-\nnym, signifying ``PHP: Hypertext Preprocessor''.\nReferences\nAllen J (2011) Topological twists: Power's shifting geogra-\nAmin A (2004) Regions unbound: Towards a new politics of\nplace. Geografiska Annaler: Series B, Human Geography\nAoyama Y and Sheppard E (2003) The dialectics of geo-\ngraphic and virtual space. Environment and Planning A\nBarad K (2003) Posthumanist performativity: Toward an\nunderstanding of how matter comes to matter. Signs:\nBarad K (2010) Quantum entanglements and hauntological\nrelations of inheritance: Dis/continuities, spacetime\nenfoldings, and justice-to-come. Derrida Today 3(2):\nBenkler Y (2006) The Wealth of Networks: How Social\nProduction Transforms Markets and Freedom. New\nHaven, CT: Yale University Press.\nBraden R (1989a) Requirements for Internet Hosts:\nCommunication Layers. RFC 1122. Available at: https://\nBraden R (1989b) Requirements for Internet Hosts: Application\nand Support. RFC 1123. Available at: https://tools.ietf.org/\nBratton BH (2012) On the Nomos of the Cloud: The Stack,\nDeep Address, Integral Geography. Available at: http://\nbratton.info/projects/talks/on-the-nomos-of-the-cloud-\nthe-stack-deep-address-integral-geography/ (accessed 7\nBratton BH (2015) The Black Stack. Available at: http://\nbratton.info/projects/texts/the-black-stack/ (accessed 7\nCallon M (2007) What does it mean to say that economics is\nperformative? In: MacKenzie D, Muniesa F and Siu L\n(eds) Do Economists Make Markets?: On the\nPerformativity of Economics Princeton, NJ: Princeton\nCallon M (2009) Elaborating the notion of performativity. Le\nChun WH (2008) The enduring ephemeral, or the future is a\nConnor S (2004) Topologies: Michel Serres and the shapes of\nDeleuze G and Guattari F (1987) A Thousand Plateaus:\nCapitalism and Schizophrenia. Minneapolis: University of\nMinnesota Press.\nDrucker J (2013) Performative materiality and theoretical\napproaches to interface. Digital Humanities Quarterly.\nAvailable at: http://www.digitalhumanities.org/dhq/vol/7/\nEasterling K (2012) The Action Is the Form: Victor Hugo`s\nTED Talk. [Kindle version]. London, Moscow: Strelka\nPress.\nAvailable at: https://www.eclipse.org/org/community_sur-\nvey/SurveySummary_2014-public.xls (accessed 5 August\nGabrys J (2014) Programming environments: Environmentality\nand citizen sensing in the smart city. Environment and\nGhosh RA, Glott R, Krieger B, et al. (2002) Free/Libre and\nOpen Source Software: Survey and Study. Part 4: Survey of\nDevelopers. Maastricht: International Institute of\nInfonomics, University of Maastricht. Available at:\nwww.flossproject.org/report/FLOSS_Final4.pdf (accessed\nGraduiertenkolleg Topologie der Technik (2015) Topological\nManifesto. Available at: https://www.tdt.tu-darmstadt.de/\nfileadmin/kolleg-tdt/Technospaces_2015/Manifest_FINAL_\nGraham M (2011) Time machines and virtual portals: The\nspatialities of the digital divide. Progress in Development\nGraham SD (2005) Software-sorted geographies. Progress in\nHalpern O, LeCavalier J, Calvillo N, et al. (2013) Test-bed\nHaraway D (1987) A manifesto for cyborgs: Science, technol-\nogy, and socialist feminism in the 1980s. Australian\nHayles K (1999) How We Became Posthuman: Virtual Bodies\nin Cybernetics, Literature, and Informatics. Chicago:\nUniversity of Chicago Press.\nKitchin R (2015) Making sense of smart cities: Addressing\npresent shortcomings. Cambridge Journal of Regions,\nKitchin R (2016) Code and the city: Reframing the concep-\ntual terrain. In: Kitchin R and Perng S (eds) Code and the\nCity. London: Routledge.\nKitchin R and Dodge M (2011) Code/Space: Software and\nEveryday Life. Cambridge, MA: MIT Press.\nKittler F (1995) There Is No Software. Available at: http://\nwww.ctheory.net/articles.aspx?id\u00bc74 (accessed 9 May\nLatham A (2002) Retheorizing the scale of globalization:\nTopologies, actor-networks, and cosmopolitanism.\nIn: Herod A and Wright MW (eds) Geographies of Power.\nLatham A (2011) Topologies and the multiplicities of space-\nLatour B (2004) Why has critique run out of steam? From\nmatters of fact to matters of concern. Critical Inquiry\nLatour B (2005) Reassembling the Social: An Introduction to\nActor-Network-Theory. Oxford, UK: Oxford University\nPress.\nLatour B (2008) A cautius prometheus: A few steps toward a\nphilosophy of design (with special attention to peter slo-\nterdijk). Keynote lecture for the Networks of Design meet-\ning of the Design History Society at Falmouth. Available at:\nLaw J (2002) Objects and spaces. Theory, Culture & Society\nLaw J and Mol A (2001) Situating technoscience: An inquiry\ninto spatialities. Environment and Planning D: Society and\nLaw J and Singleton V (2005) Object lessons. Organization\nLefebvre H (1991) The Production of Space. Oxford, UK:\nBlackwell.\nLessig L (2008) Remix: Making Art and Commerce Thrive in\nthe Hybrid Economy. New York, NY: Penguin Press.\nLury C, Parisi L and Terranova T (2012) Introduction: The\nbecoming topological of culture. Theory, Culture & Society\nMackenzie A (2016) Code-crowd: How software repositories\nexpress urban life. In: Kitchin R and Perng S (eds) Code\nand the City. London, UK: Routledge.\nManovich L (2013) Software Takes Command: Extending the\nLanguage of New Media. London, UK: Bloomsbury.\nMarres N (2012) On some uses and abuses of topology in\nthe social analysis of technology (or the problem with\nsmart meters). Theory, Culture & Society 29(4\u00ad5):\nMartin L and Secor AJ (2014) Towards a post-mathema-\ntical topology. Progress in Human Geography 38(3):\nMattern S (2014) Interfacing urban intelligence. Places\nJournal. Available at: https://placesjournal.org/article/\nMcFarlane C (2009) Translocal assemblages: Space, power\nMerton RK (1968) Social Theory and Social Structure.\nNew York, NY: Free Press.\nMurdoch J (1998) The spaces of actor-network theory.\n10 Big Data & Society\nNafus D, Leach J and Krieger B (2006) Free/Libre and Open\nSource Software: Survey and Study. Gender: Integrated\nReport of Findings. Cambridge, UK: University of\nCambridge. Available at: http://www.flosspols.org/\ndeliverables/FLOSSPOLS-D16-Gender_Integrated_\nOng A and Collier SJ (2005) Global Assemblages: Technology,\nPolitics, and Ethics as Anthropological Problems. Malden,\nMA: Blackwell.\nOpitz S and Tellmann U (2012) Global territories: Zones of\neconomic and legal dis/connectivity. Distinktion:\nParikka J (2012) New materialism as media theory:\nMedianatures and dirty matter. Communication and\nParisi L (2013) Contagious Architecture: Computation,\nAesthetics, and Space. Cambridge, MA: MIT Press.\nPickering A (2002) Cybernetics and the mangle: Ashby, Beer\nRogers R (2012) Mapping and the politics of web space.\nRuppert E (2012) The governmental topologies of database\nSerres M and Latour B (1995) Conversations on Science,\nCulture, and Time. Ann Arbor, MI: University of\nMichigan Press.\nSha XW (2012) Topology and morphogenesis. Theory,\nSheller M (2004) Mobile publics: Beyond the network per-\nspective. Environment and Planning D: Society and Space\nShelton T, Zook M and Wiig A (2015) The `actually existing\nsmart city'. Cambridge Journal of Regions, Economy and\nShields R (2012) Cultural topology: The seven bridges of\nKonigsburg [sic], 1736. Theory, Culture & Society\nSolomon R (2013) Last in, first out: Network archeology as/\nof the stack. Amodern 2. Available at: http://amodern.net/\nStar SL (1999) The ethnography of infrastructure. American\nTerranova T (2014) Red stack attack! Algorithms, capital and\nthe automation of the common. In: Mackay R and\nAvanessian A (eds) #Accelerate#. Falmouth, UK; Berlin,\nDE: Urbanomic Media; Merve.\nThrift N and French S (2002) The automatic production of\nspace. Transactions of the Institute of British Geographers\nvan Dijk JAGM (2006) Digital divide research, achievements\nWhite JM (2016) Moving applications: A multilayered\napproach to mobile computing. In: Kitchin R and Perng\nS (eds) Code and the City. London, UK: Routledge.\nWilson MW (2012) Location-based services, conspicuous\nmobility, and the location-aware future. Geoforum 43(6):\nWyatt S and Balmer B (2007) Home on the range: what and\nwhere is the middle in science and technology studies?\nZimmermann H (1980) OSI reference model: The ISO model\nof architecture for open systems interconnection. IEEE\nZittrain J (2008) The Future of the Internet--and How to Stop\nIt. New Haven, CT: Yale University Press.\nZook MA and Graham M (2007) Mapping DigiPlace:\nGeocoded Internet data and the representation of place.\nEnvironment and Planning B: Planning and Design 34(3):\nAppendix\nDocuments used in reconstructing the history of Git\nBarr J and Torvalds L (2005) BitKeeper and Linux: The\nEnd of the Road? Available at: http://archive09.linux.\nChacon S and Straub B (2014) Pro Git: Everything\nYou Need to Know about Git. New York, NY: Apress.\nInterview with Git Creator Linus Torvalds. Available at:\nhttp://www.linux.com/news/featured-blogs/185-jenni-\nhttps://www.kernel.org/pub/software/scm/git/docs/\nHamano JC (2006) Git: A stupid content tracker. In:\nProceedings of the Ottawa Linux Symposium 2006.\nAvailable at: http://download.hforge.org/doc/git-\nHamano JC (2008) Git Chronicles: How much of\nthis did linus really write? In: Proceedings of the\nGitTogether conference 2008, Mountain View.\nAvailable at: https://docs.google.com/file/d/0Bw3FA\npcOlPDhMFR3UldGSHFGcjQ/view (accessed 17\nJorgensen G and Torvalds L (2012) Linus Torvalds\nGoes off on Linux and Git. Available at: http://typical-\nprogrammer.com/linus-torvalds-goes-off-on-linux-and-\nKnorr E and Preston-Werner T (2012) GitHub CEO:\nWe`re Helping Software Eat the World. Available at:\ntion-development/github-ceo\u00adwe-re-helping-software-\nMcMillan R (2005) After Controversy, Torvalds\nBegins Work on `Git'. Available at: http://www.\nMcMillan R (2012a) Lord of the Files: How GitHub\nTamed Free Software (And More). Available at: http://\nMcMillan R (2012b) The Legacy of Linus Torvalds:\nLinux, Git, and One Giant Flamethrower. Available at:\nbaut Git. Available at: http://www.heise.de/developer/\nmeldung/Vor-10-Jahren-Linus-Torvalds-baut-Git-\nOrsini L and Preston-Werner T (2013) GitHub's Tom\nPreston-Werner: How We Went Mainstream. Available\nTorvalds L (2005a) `First ever real kernel git merge!'\n[E-Mail to Git Mailing List]. Available at: http://mar-\nTorvalds L (2005b) `Kernel SCM saga.' [E-Mail to\nLinux-Kernel Mailing List]. Available at: http://mar-\nTorvalds L (2005c) `Re: Kernel SCM saga.' [E-Mail\nto Linux Kernel Mailing List]. Available at: http://mar-\nTorvalds L (2005d) `Re: Kernel SCM saga.' [E-Mail\nto Linux-Kernel Mailing List]. Available at: http://mar-\nTorvalds L (2005e) `Re: more git updates.' [E-mail to\nLinux Kernel Mailing List]. Available at: http://mar-\nTorvalds L (2006a) `Re: git and bzr' [E-mail to Git\nMailing List]. Available at: http://marc.info/\nTorvalds L (2006b) `Re: VCS comparison table' [E-\nmail to Git Mailing List]. Available at: http://mar-\nTorvalds L (2006c) `Re: VCS comparison table' [E-\nMail to Git and Bazaar Mailing Lists]. Available at:\nTorvalds L (2006d) `Re: [ANNOUNCE] Git wiki'\n[E-Mail to Git Mailing List]. Available at: http://mar-\nTorvalds L (2007a) `Re: Trivia: When did git self-\nhost?' [E-mail to Git Mailing List]. Available at:\nTorvalds L (2007b) Linus Torvalds on Git [Google\nTech Talk]. Available at: https://www.youtube.com/\nZemlin J (2012) The Greatness of Git. Available at:\nhttp://www.linuxfoundation.org/news-media/blogs/\nThis article is a part of special theme on Spatial Big Data. To see a full list of all articles in this special theme,\nplease click here: http://bds.sagepub.com/content/spatial-big-data.\n12 Big Data & Society"
}